#!/usr/bin/env python3

#HALP Merge master into all PRs and carrion.

from common import findproject, nicely, AllBranches, ispublic, stderr, run, runlines, touchmsg, runpy
import os

def merge(b, check = True):
    return runlines(['git', 'merge', b, '--no-edit'], check = check)

def reportornone(b):
    status = merge(b, False)
    conflicts = sum(1 for line in status if 'CONFLICT' in line)
    if conflicts:
        run(['git', 'reset', '--hard'])
        return conflicts, b
    for line in status:
        print(line)

def getreports(branches):
    def g():
        for b in branches:
            r = reportornone(b)
            if r is not None:
                yield r
    return list(g())

def mergeintocurrent(parents):
    while True:
        getreports(parents) # Do all automatic merges up-front for accurate conflict counts.
        reports = getreports(parents)
        if not reports:
            break
        for r in reports:
            stderr("%s %s" % r)
        reports.sort()
        _, b = reports[0]
        stderr("Merging: %s" % b)
        merge(b)

def touchifnecessary():
    if [touchmsg()] == runlines(['git', 'log', '-1', '--pretty=format:%B']):
        stderr('No changes, touch not needed.')
    else:
        runpy(['touchb'])

def multimerge():
    allbranches = AllBranches()
    remaining = allbranches.names
    branchtoparents = {b: allbranches.parents(b) for b in remaining}
    allparents = set(p for parents in branchtoparents.values() for p in parents)
    allparents.add('kitchen-sink') # TODO: Generalise this somehow.
    def update(b):
        run(['git', 'checkout', b])
        parents = branchtoparents[b]
        if b in allparents or ispublic():
            mergeintocurrent(parents)
            if 'kitchen-sink' == b: # TODO: Retire this.
                touchifnecessary()
        else:
            p, = parents
            run(['git', 'rebase', p])
    done = set()
    while remaining:
        stderr("Remaining: %s" % ' '.join(remaining))
        def g():
            for b in remaining:
                # FIXME: Also support non-origin remotes.
                badparents = [p for p in branchtoparents[b] if not (p.startswith('origin/') or p in done)]
                if badparents:
                    yield b, badparents
                else:
                    update(b)
                    done.add(b)
        status = list(g())
        remaining2 = [b for b, _ in status]
        if remaining2 == remaining:
            for b, deps in status:
                stderr("%s: %s" % (b, ' '.join(deps)))
            raise Exception("Still remain: %s" % remaining)
        remaining = remaining2

def main():
    os.chdir(findproject()) # Don't fail if working directory doesn't exist in some branch.
    nicely(multimerge)

if '__main__' == __name__:
    main()
